generator client {
  provider      = "prisma-client-js"
  output        = "../generated/prisma"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
  plugins       = ["@prisma/nextjs-monorepo-workaround-plugin"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Test {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sections Section[]
}

model Section {
  id        String      @id @default(uuid())
  number    Int
  type      SectionType
  testId    String
  test      Test        @relation(fields: [testId], references: [id], onDelete: Cascade)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  questions Question[]

  @@unique([testId, number])
  @@index([testId])
}

model Question {
  id        String  @id @default(uuid())
  sectionId String
  section   Section @relation(fields: [sectionId], references: [id], onDelete: Cascade)

  index     Int
  question  String       @db.Text
  passage   String?      @db.Text
  answer    String?
  type      QuestionType @default(MULTIPLE)
  showTable Boolean      @default(false)
  showImage Boolean      @default(false)
  score     Int?
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  choices Choice[] @relation("QuestionChoices")
  tables  Table[]  @relation("QuestionTables")
  images  Image[]  @relation("QuestionImages")

  @@unique([sectionId, index])
  @@index([sectionId])
}

model Choice {
  id         String   @id @default(uuid())
  questionId String
  question   Question @relation("QuestionChoices", fields: [questionId], references: [id])
  order      Int
  text       String

  images Image[] @relation("ChoiceImages")

  @@index([questionId])
}

model Table {
  id         String   @id @default(uuid())
  questionId String   @unique
  question   Question @relation("QuestionTables", fields: [questionId], references: [id], onDelete: Cascade)
  title      String?
  data       String   @db.Text

  @@index([questionId])
}

model Image {
  id        String   @id @default(uuid())
  url       String   @db.VarChar(512)
  createdAt DateTime @default(now())

  // ✅ Question과의 관계
  questionId String?
  question   Question? @relation("QuestionImages", fields: [questionId], references: [id], onDelete: Cascade)

  // ✅ Choice와의 관계
  choiceId String?
  choice   Choice? @relation("ChoiceImages", fields: [choiceId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  // ✅ 여기에 externalId 필드를 추가하세요
  externalId String?

  @@index([questionId])
  @@index([choiceId])
}

enum SectionType {
  READING_WRITING
  MATH
}

enum QuestionType {
  MULTIPLE
  SHORT
}
